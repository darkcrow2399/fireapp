import sqlite3
import tkinter as tk
from tkinter import messagebox

class Database:
    def __init__(self):
        self.conn = sqlite3.connect("students.db")
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            age INTEGER NOT NULL
        )""")
        self.conn.commit()

    def add_student(self, name, age):
        self.cursor.execute("INSERT INTO students (name, age) VALUES (?, ?)", (name, age))
        self.conn.commit()

    def update_student(self, student_id, name, age):
        self.cursor.execute("UPDATE students SET name = ?, age = ? WHERE id = ?", (name, age, student_id))
        self.conn.commit()

    def delete_student(self, student_id):
        self.cursor.execute("DELETE FROM students WHERE id = ?", (student_id,))
        self.conn.commit()

    def get_students(self):
        self.cursor.execute("SELECT * FROM students")
        return self.cursor.fetchall()

    def close(self):
        self.cursor.close()
        self.conn.close()

class Application(tk.Tk):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.title("Student Management System")
        self.geometry("600x400")

        self.create_widgets()

    def create_widgets(self):
        # Add Student section
        self.add_label = tk.Label(self, text="Add Student")
        self.add_label.grid(row=0, column=0, pady=10)

        self.name_label = tk.Label(self, text="Name:")
        self.name_label.grid(row=1, column=0, padx=10, pady=5)

        self.name_entry = tk.Entry(self)
        self.name_entry.grid(row=1, column=1, padx=10, pady=5)

        self.age_label = tk.Label(self, text="Age:")
        self.age_label.grid(row=2, column=0, padx=10, pady=5)

        self.age_entry = tk.Entry(self)
        self.age_entry.grid(row=2, column=1, padx=10, pady=5)

        self.add_button = tk.Button(self, text="Add Student", command=self.add_student)
        self.add_button.grid(row=3, column=0, columnspan=2, pady=10)

        # Update Student section
        self.update_label = tk.Label(self, text="Update Student")
        self.update_label.grid(row=4, column=0, pady=10)

        self.update_id_label = tk.Label(self, text="Student ID:")
        self.update_id_label.grid(row=5, column=0, padx=10, pady=5)

        self.update_id_entry = tk.Entry(self)
        self.update_id_entry.grid(row=5, column=1, padx=10, pady=5)

        self.update_name_label = tk.Label(self, text="New Name:")
        self.update_name_label.grid(row=6, column=0, padx=10, pady=5)

        self.update_name_entry = tk.Entry(self)
        self.update_name_entry.grid(row=6, column=1, padx=10, pady=5)

        self.update_age_label = tk.Label(self, text="New Age:")
        self.update_age_label.grid(row=7, column=0, padx=10, pady=5)

        self.update_age_entry = tk.Entry(self)
        self.update_age_entry.grid(row=7, column=1, padx=10, pady=5)

        self.update_button = tk.Button(self, text="Update Student", command=self.update_student)
        self.update_button.grid(row=8, column=0, columnspan=2, pady=10)

        # Delete Student section
        self.delete_label = tk.Label(self, text="Delete Student")
        self.delete_label.grid(row=9, column=0, pady=10)

        self.delete_id_label = tk.Label(self, text="Student ID:")
        self.delete_id_label.grid(row=10, column=0, padx=10, pady=5)

        self.delete_id_entry = tk.Entry(self)
        self.delete_id_entry.grid(row=10, column=1, padx=10, pady=5)

        self.delete_button = tk.Button(self, text="Delete Student", command=self.delete_student)
        self.delete_button.grid(row=11, column=0, columnspan=2, pady=10)

        # View Students
        self.view_button = tk.Button(self, text="View Students", command=self.view_students)
        self.view_button.grid(row=12, column=0, columnspan=2, pady=10)

        # Text box to display students
        self.text_area = tk.Text(self, width=50, height=10)
        self.text_area.grid(row=13, column=0, columnspan=2, padx=10, pady=10)

    def add_student(self):
        name = self.name_entry.get()
        age = self.age_entry.get()

        if name and age.isdigit():
            self.db.add_student(name, int(age))
            messagebox.showinfo("Success", f"Student {name} added successfully!")
            self.clear_entries()
        else:
            messagebox.showerror("Error", "Invalid name or age.")

    def update_student(self):
        student_id = self.update_id_entry.get()
        name = self.update_name_entry.get()
        age = self.update_age_entry.get()

        if student_id.isdigit() and name and age.isdigit():
            self.db.update_student(int(student_id), name, int(age))
            messagebox.showinfo("Success", f"Student with ID {student_id} updated!")
            self.clear_entries()
        else:
            messagebox.showerror("Error", "Invalid input.")

    def delete_student(self):
        student_id = self.delete_id_entry.get()

        if student_id.isdigit():
            self.db.delete_student(int(student_id))
            messagebox.showinfo("Success", f"Student with ID {student_id} deleted!")
            self.clear_entries()
        else:
            messagebox.showerror("Error", "Invalid student ID.")

    def view_students(self):
        students = self.db.get_students()
        self.text_area.delete(1.0, tk.END)  # Clear the text area before showing new data
        if students:
            for student in students:
                self.text_area.insert(tk.END, f"ID: {student[0]}, Name: {student[1]}, Age: {student[2]}\n")
        else:
            self.text_area.insert(tk.END, "No students found.")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.age_entry.delete(0, tk.END)
        self.update_id_entry.delete(0, tk.END)
        self.update_name_entry.delete(0, tk.END)
        self.update_age_entry.delete(0, tk.END)
        self.delete_id_entry.delete(0, tk.END)

def main():
    db = Database()
    app = Application(db)
    app.mainloop()
    db.close()

if __name__ == "__main__":
    main()